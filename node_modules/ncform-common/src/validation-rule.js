
class ValidationRule {

  constructor() {
    this.name = '',
      this.defaultErrMsg = ''
  }

  validate(val, ruleVal, timeStamp) {

    this.errMsg = this.defaultErrMsg;
    let options = {};

    if (ruleVal instanceof Object) { // 如果格式是： {value: '', errMsg: ''}
      this.errMsg = ruleVal.errMsg;
      ruleVal = ruleVal.value;
      options = ruleVal.options || {};
    }

    let result = this.validateLogic(val, ruleVal, options);

    return new Promise((resolve, reject) => {
      switch (Object.prototype.toString.call(result).toLowerCase().slice(8, -1)) {
        case 'promise':
          result.then(result => {
            resolve({
              result: result,
              errMsg: !result ? this.errMsg || this.defaultErrMsg : '',
              timeStamp: timeStamp
            });
          });
          break;
        case 'boolean':
          resolve({
            result: result,
            errMsg: !result ? this.errMsg || this.defaultErrMsg : '',
            timeStamp: timeStamp
          });
          break;
        default:
          resolve({
            result: false,
            errMsg: 'something wrong with validateLogic.',
            timeStamp: timeStamp
          });
          break;
      }
    })
  }

  validateLogic(val, ruleVal, options) {
    return false;
  }

}

export default ValidationRule;
module.exports = ValidationRule;